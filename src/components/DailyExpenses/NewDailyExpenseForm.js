import React, { useRef, useContext } from "react";
import Modal from "../UI/Modal";
import classes from "./NewDailyExpenseForm.module.css";
import ExpensesContext from "../../context/expenses-context";
import useInput from "../../hooks/use-input";
import useHttp from "../../hooks/use-http";

//USEINPUT VALIDATION FUNCTIONS
const isNotEmpty = (value) => value !== "";
const isValidAmount = (value) => value !== "" && value > 0;
const selectionIsPicked = (value) => value === "Y" || value === "N";

/**
 * This component is responsible for rendering the new daily expense form.
 * 
 * @visibleName New Daily Expense Form
 */
const NewDailyExpenseForm = (props) => {
  const expensesContext = useContext(ExpensesContext);

  const { sendRequest: postRequest } = useHttp();

  //USEINPUTS
  const {
    enteredValue: enteredAmount,
    inputIsValid: amountInputIsValid,
    hasError: amountHasError,
    inputChangeHandler: amountInputChangeHandler,
    inputOnBlurHandler: amountOnBlurHandler,
    reset: resetAmount,
  } = useInput(isValidAmount);

  const {
    enteredValue: enteredDate,
    inputIsValid: dateInputIsValid,
    hasError: dateHasError,
    inputChangeHandler: dateInputChangeHandler,
    inputOnBlurHandler: dateOnBlurHandler,
    reset: resetDate,
  } = useInput(isNotEmpty);

  const {
    enteredValue: isPaidValue,
    inputIsValid: isIsPaidValid,
    hasError: isPaidHasError,
    inputChangeHandler: isPaidInputChangeHandler,
    inputOnBlurHandler: isPaidOnBlurHandler,
    reset: resetIsPaid,
  } = useInput(selectionIsPicked);

  const {
    enteredValue: enteredMerchant,
    inputIsValid: merchantInputIsValid,
    hasError: merchantHasError,
    inputChangeHandler: merchantInputChangeHandler,
    inputOnBlurHandler: merchantOnBlurHandler,
    reset: resetMerchant,
  } = useInput(isNotEmpty);

  //INPUT REFS
  const amountInputRef = useRef();
  const dateInputRef = useRef();
  const isPaidInputRef = useRef();
  const merchantInputRef = useRef();

  /**
   * 
   * @param {Object} newExpenseObject - Expense to be transformed and added to server
   * 
   * @param {string} id - unique character sequence that identifies the expense
   * @param {Object} date - A new Date object which gets created when the new expense object is created. Accepts the entered date as a parameter.
   * @param {string} enteredDate - the date which is picked by the user. This value is passed to the Date constructor.
   * @param {number} amount - The amount of money the user spent on their expense.
   * @param {boolean} isPaid - true or false value indicating whether or not the user paid off their expense (i.e. if they used credit).
   * @param {string} merchant - The merchant with whom the transaction took place.
   */
  const newExpenseObject = {
    id: null,
    date: new Date(enteredDate),
    amount: enteredAmount,
    isPaid: isPaidValue,
    merchant: enteredMerchant,
  };

  //creates expense in Firebase format to be added to server
  const createExpense = (expenseObject, expenseData) => {
    const generatedId = expenseData.name; //name is the id generated by firebase
    const createdExpense = {
      id: generatedId,
      amount: expenseObject.amount,
      date: expenseObject.date,
      isPaid: expenseObject.isPaid,
      merchant: expenseObject.merchant,
    };
    expensesContext.onAddExpense(createdExpense); //Add expense to context
  };

  const postExpenseToServer = (expenseObject) => {
    postRequest(
      {
        url: "https://budget-breakdown-85145-default-rtdb.firebaseio.com/expenses.json",
        method: "POST",
        body: {
          id: expenseObject.id,
          amount: expenseObject.amount,
          date: expenseObject.date,
          isPaid: expenseObject.isPaid,
          merchant: expenseObject.merchant,
        },
        headers: {
          "Content-Type": "application/json",
        },
      },
      createExpense.bind(null, expenseObject)
    );
  };

  const formIsValid =
    amountInputIsValid &&
    dateInputIsValid &&
    isIsPaidValid &&
    merchantInputIsValid;

  const resetInputs = () => {
    resetAmount();
    resetDate();
    resetIsPaid();
    resetMerchant();
  };

  const submitHandler = (event) => {
    event.preventDefault();
    if (formIsValid) {
      postExpenseToServer(newExpenseObject);
      resetInputs();
    } else {
      if (!amountInputIsValid) {
        amountInputRef.current.focus();
      } else if (!dateInputIsValid) {
        dateInputRef.current.focus();
      } else if (!isIsPaidValid) {
        isPaidInputRef.current.focus();
      } else if (!merchantInputIsValid) {
        merchantInputRef.current.focus();
      }
    }
  };

  return (
    <Modal onClose={props.onClose}>
      <form onSubmit={submitHandler} className={classes["add-expense-form"]}>
        <h3>New Daily Expense</h3>
        <input
          ref={amountInputRef}
          id="amountField"
          type="number"
          placeholder="Enter Amount"
          onChange={amountInputChangeHandler}
          onBlur={amountOnBlurHandler}
          value={enteredAmount}
          className={`${classes.input} ${
            amountHasError ? classes.invalid : ""
          }`}
        />
        <input
          ref={dateInputRef}
          id="datePicker"
          type="date"
          onChange={dateInputChangeHandler}
          onBlur={dateOnBlurHandler}
          value={enteredDate}
          className={`${classes.input} ${dateHasError ? classes.invalid : ""}`}
        />
        <select
          ref={isPaidInputRef}
          id="isPaidDropdown"
          name="isPaidDropdown"
          onChange={isPaidInputChangeHandler}
          onBlur={isPaidOnBlurHandler}
          value={isPaidValue}
          className={`${classes.input} ${
            isPaidHasError ? classes.invalid : ""
          }`}
        >
          <option value="default">Paid Off?</option>
          <option value="Y">Yes</option>
          <option value="N">No</option>
        </select>

        <input
          ref={merchantInputRef}
          id="merchantField"
          type="text"
          placeholder="Merchant"
          onChange={merchantInputChangeHandler}
          onBlur={merchantOnBlurHandler}
          value={enteredMerchant}
          className={`${classes.input} ${
            merchantHasError ? classes.invalid : ""
          }`}
        />

        <div className={classes["button-div"]}>
          <button type="submit" className={classes["add-expense-button"]}>
            Add Expense
          </button>
          <button
            type="button"
            className={classes["close-button"]}
            onClick={props.onClose}
          >
            Close
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default NewDailyExpenseForm;
